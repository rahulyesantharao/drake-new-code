package drc;

struct footstep_plan_request_t
{
	int64_t utime;

	// What state to plan from
	bot_core.robot_state_t initial_state;

	// What location to plan to
	// We can plan either to a goal pose OR to one or more final step targets
	bot_core.position_3d_t goal_pos;
	// If num_goal_steps > 0, we ignore goal_pos and plan to the final step targets
	int32_t num_goal_steps;
	footstep_t goal_steps[num_goal_steps];

	// Optionally, a sequence of footstep goals from an existing plan can also be provided. Only goals for which one of the fixed_x, fixed_y, etc. flags has been set TRUE will affect the returned plan.
	int32_t num_existing_steps;
	footstep_t existing_steps[num_existing_steps];

	// Results from the obstacle-free segmentation algorithm.
	// The list can be empty (will default to seeding all steps around the robot's
	// current location).
	int32_t num_iris_regions;
	iris_region_t iris_regions[num_iris_regions];

	footstep_plan_params_t params;

	footstep_params_t default_step_params;
}