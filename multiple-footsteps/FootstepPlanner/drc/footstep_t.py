"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import bot_core.position_3d_t

import drc.footstep_params_t

class footstep_t(object):
    __slots__ = ["utime", "pos", "id", "is_right_foot", "is_in_contact", "fixed_x", "fixed_y", "fixed_z", "fixed_roll", "fixed_pitch", "fixed_yaw", "num_terrain_pts", "terrain_path_dist", "terrain_height", "infeasibility", "params"]

    def __init__(self):
        self.utime = 0
        self.pos = bot_core.position_3d_t()
        self.id = 0
        self.is_right_foot = False
        self.is_in_contact = False
        self.fixed_x = False
        self.fixed_y = False
        self.fixed_z = False
        self.fixed_roll = False
        self.fixed_pitch = False
        self.fixed_yaw = False
        self.num_terrain_pts = 0
        self.terrain_path_dist = []
        self.terrain_height = []
        self.infeasibility = 0.0
        self.params = drc.footstep_params_t()

    def encode(self):
        buf = BytesIO()
        buf.write(footstep_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        assert self.pos._get_packed_fingerprint() == bot_core.position_3d_t._get_packed_fingerprint()
        self.pos._encode_one(buf)
        buf.write(struct.pack(">ibbbbbbbbi", self.id, self.is_right_foot, self.is_in_contact, self.fixed_x, self.fixed_y, self.fixed_z, self.fixed_roll, self.fixed_pitch, self.fixed_yaw, self.num_terrain_pts))
        buf.write(struct.pack('>%df' % self.num_terrain_pts, *self.terrain_path_dist[:self.num_terrain_pts]))
        buf.write(struct.pack('>%df' % self.num_terrain_pts, *self.terrain_height[:self.num_terrain_pts]))
        buf.write(struct.pack(">d", self.infeasibility))
        assert self.params._get_packed_fingerprint() == drc.footstep_params_t._get_packed_fingerprint()
        self.params._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != footstep_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return footstep_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = footstep_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        self.pos = bot_core.position_3d_t._decode_one(buf)
        self.id = struct.unpack(">i", buf.read(4))[0]
        self.is_right_foot = bool(struct.unpack('b', buf.read(1))[0])
        self.is_in_contact = bool(struct.unpack('b', buf.read(1))[0])
        self.fixed_x = bool(struct.unpack('b', buf.read(1))[0])
        self.fixed_y = bool(struct.unpack('b', buf.read(1))[0])
        self.fixed_z = bool(struct.unpack('b', buf.read(1))[0])
        self.fixed_roll = bool(struct.unpack('b', buf.read(1))[0])
        self.fixed_pitch = bool(struct.unpack('b', buf.read(1))[0])
        self.fixed_yaw = bool(struct.unpack('b', buf.read(1))[0])
        self.num_terrain_pts = struct.unpack(">i", buf.read(4))[0]
        self.terrain_path_dist = struct.unpack('>%df' % self.num_terrain_pts, buf.read(self.num_terrain_pts * 4))
        self.terrain_height = struct.unpack('>%df' % self.num_terrain_pts, buf.read(self.num_terrain_pts * 4))
        self.infeasibility = struct.unpack(">d", buf.read(8))[0]
        self.params = drc.footstep_params_t._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if footstep_t in parents: return 0
        newparents = parents + [footstep_t]
        tmphash = (0x2e2bcf45b9ad9a6a+ bot_core.position_3d_t._get_hash_recursive(newparents)+ drc.footstep_params_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if footstep_t._packed_fingerprint is None:
            footstep_t._packed_fingerprint = struct.pack(">Q", footstep_t._get_hash_recursive([]))
        return footstep_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

