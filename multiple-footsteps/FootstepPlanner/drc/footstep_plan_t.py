"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import drc.footstep_t

import drc.iris_region_t

import drc.footstep_plan_params_t

class footstep_plan_t(object):
    __slots__ = ["utime", "num_steps", "footsteps", "num_iris_regions", "iris_regions", "iris_region_assignments", "params"]

    def __init__(self):
        self.utime = 0
        self.num_steps = 0
        self.footsteps = []
        self.num_iris_regions = 0
        self.iris_regions = []
        self.iris_region_assignments = []
        self.params = drc.footstep_plan_params_t()

    def encode(self):
        buf = BytesIO()
        buf.write(footstep_plan_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.utime, self.num_steps))
        for i0 in range(self.num_steps):
            assert self.footsteps[i0]._get_packed_fingerprint() == drc.footstep_t._get_packed_fingerprint()
            self.footsteps[i0]._encode_one(buf)
        buf.write(struct.pack(">i", self.num_iris_regions))
        for i0 in range(self.num_iris_regions):
            assert self.iris_regions[i0]._get_packed_fingerprint() == drc.iris_region_t._get_packed_fingerprint()
            self.iris_regions[i0]._encode_one(buf)
        buf.write(struct.pack('>%di' % self.num_steps, *self.iris_region_assignments[:self.num_steps]))
        assert self.params._get_packed_fingerprint() == drc.footstep_plan_params_t._get_packed_fingerprint()
        self.params._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != footstep_plan_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return footstep_plan_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = footstep_plan_t()
        self.utime, self.num_steps = struct.unpack(">qi", buf.read(12))
        self.footsteps = []
        for i0 in range(self.num_steps):
            self.footsteps.append(drc.footstep_t._decode_one(buf))
        self.num_iris_regions = struct.unpack(">i", buf.read(4))[0]
        self.iris_regions = []
        for i0 in range(self.num_iris_regions):
            self.iris_regions.append(drc.iris_region_t._decode_one(buf))
        self.iris_region_assignments = struct.unpack('>%di' % self.num_steps, buf.read(self.num_steps * 4))
        self.params = drc.footstep_plan_params_t._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if footstep_plan_t in parents: return 0
        newparents = parents + [footstep_plan_t]
        tmphash = (0xb6fa90608233073e+ drc.footstep_t._get_hash_recursive(newparents)+ drc.iris_region_t._get_hash_recursive(newparents)+ drc.footstep_plan_params_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if footstep_plan_t._packed_fingerprint is None:
            footstep_plan_t._packed_fingerprint = struct.pack(">Q", footstep_plan_t._get_hash_recursive([]))
        return footstep_plan_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

