"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import bot_core.robot_state_t

import drc.footstep_t

import drc.iris_region_t

import drc.footstep_plan_params_t

import bot_core.position_3d_t

import drc.footstep_params_t

class footstep_plan_request_t(object):
    __slots__ = ["utime", "initial_state", "goal_pos", "num_goal_steps", "goal_steps", "num_existing_steps", "existing_steps", "num_iris_regions", "iris_regions", "params", "default_step_params"]

    def __init__(self):
        self.utime = 0
        self.initial_state = bot_core.robot_state_t()
        self.goal_pos = bot_core.position_3d_t()
        self.num_goal_steps = 0
        self.goal_steps = []
        self.num_existing_steps = 0
        self.existing_steps = []
        self.num_iris_regions = 0
        self.iris_regions = []
        self.params = drc.footstep_plan_params_t()
        self.default_step_params = drc.footstep_params_t()

    def encode(self):
        buf = BytesIO()
        buf.write(footstep_plan_request_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        assert self.initial_state._get_packed_fingerprint() == bot_core.robot_state_t._get_packed_fingerprint()
        self.initial_state._encode_one(buf)
        assert self.goal_pos._get_packed_fingerprint() == bot_core.position_3d_t._get_packed_fingerprint()
        self.goal_pos._encode_one(buf)
        buf.write(struct.pack(">i", self.num_goal_steps))
        for i0 in range(self.num_goal_steps):
            assert self.goal_steps[i0]._get_packed_fingerprint() == drc.footstep_t._get_packed_fingerprint()
            self.goal_steps[i0]._encode_one(buf)
        buf.write(struct.pack(">i", self.num_existing_steps))
        for i0 in range(self.num_existing_steps):
            assert self.existing_steps[i0]._get_packed_fingerprint() == drc.footstep_t._get_packed_fingerprint()
            self.existing_steps[i0]._encode_one(buf)
        buf.write(struct.pack(">i", self.num_iris_regions))
        for i0 in range(self.num_iris_regions):
            assert self.iris_regions[i0]._get_packed_fingerprint() == drc.iris_region_t._get_packed_fingerprint()
            self.iris_regions[i0]._encode_one(buf)
        assert self.params._get_packed_fingerprint() == drc.footstep_plan_params_t._get_packed_fingerprint()
        self.params._encode_one(buf)
        assert self.default_step_params._get_packed_fingerprint() == drc.footstep_params_t._get_packed_fingerprint()
        self.default_step_params._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != footstep_plan_request_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return footstep_plan_request_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = footstep_plan_request_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        self.initial_state = bot_core.robot_state_t._decode_one(buf)
        self.goal_pos = bot_core.position_3d_t._decode_one(buf)
        self.num_goal_steps = struct.unpack(">i", buf.read(4))[0]
        self.goal_steps = []
        for i0 in range(self.num_goal_steps):
            self.goal_steps.append(drc.footstep_t._decode_one(buf))
        self.num_existing_steps = struct.unpack(">i", buf.read(4))[0]
        self.existing_steps = []
        for i0 in range(self.num_existing_steps):
            self.existing_steps.append(drc.footstep_t._decode_one(buf))
        self.num_iris_regions = struct.unpack(">i", buf.read(4))[0]
        self.iris_regions = []
        for i0 in range(self.num_iris_regions):
            self.iris_regions.append(drc.iris_region_t._decode_one(buf))
        self.params = drc.footstep_plan_params_t._decode_one(buf)
        self.default_step_params = drc.footstep_params_t._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if footstep_plan_request_t in parents: return 0
        newparents = parents + [footstep_plan_request_t]
        tmphash = (0x8b0b80a3a678cd8a+ bot_core.robot_state_t._get_hash_recursive(newparents)+ bot_core.position_3d_t._get_hash_recursive(newparents)+ drc.footstep_t._get_hash_recursive(newparents)+ drc.footstep_t._get_hash_recursive(newparents)+ drc.iris_region_t._get_hash_recursive(newparents)+ drc.footstep_plan_params_t._get_hash_recursive(newparents)+ drc.footstep_params_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if footstep_plan_request_t._packed_fingerprint is None:
            footstep_plan_request_t._packed_fingerprint = struct.pack(">Q", footstep_plan_request_t._get_hash_recursive([]))
        return footstep_plan_request_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

